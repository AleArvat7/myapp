name: CI/CD
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: myapp
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d myapp"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Postgres client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Build Docker image
        run: docker build -t myapp:latest .

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -U user -d myapp; do
            sleep 1
          done

      - name: Initialize DB schema
        run: |
          PGPASSWORD=pass psql \
            -h localhost \
            -U user \
            -d myapp \
            -f init.sql

      - name: Start services with Docker Compose
        run: docker compose up -d --build

      - name: Smoke-test API
        run: |
          sleep 5
          curl -f http://localhost:3000/items

      - name: Tear down Compose
        run: docker compose down

      # ────────────────────────────────────────────────
      # Install kind, create cluster, and set up kubectl
      - name: Install Kind manually
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/kind

      - name: Create Kind cluster
        run: kind create cluster --name myapp-cluster

      - name: Install kubectl manually
        run: |
          curl -LO "https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Load to Kind & Deploy
        run: |
          kind load docker-image myapp:latest --name myapp-cluster
          kubectl apply -f k8s/
